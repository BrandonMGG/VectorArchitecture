;consideraciones inciales: dimension de imagen 300x300 = 90KB
;cambiar aritméticas con inmediatos utilizando mov
;d1 tiene datos a leer
;d2 datos de salida
; cuando imagen_loop va por la 2da iteracion
start:
    mov r0, 0
    mov r1, 5          ; Inicializar valor de Ax=Ay
    mov r4, 0          ; index
    mov r5, 400        ; direccion de sine LUT en memoria
    mov r10, 0         ; contador para loop de transformacion
    mov r11, 302         ; referencia a primer dato de pixel en memoria

imagen_loop:        ;salto de 5 en 5 hasta 25, cada salto debe generar una imagen 
    mov r0, 25
    cmp r1, r0
    sig fin_prog       ; salto de igualdad

    mov r2, 0          ; Inicializar valor x
    mov r3, 0          ; Inicializar valor y
    mov r0, 5
    sum r1, r1, r0     ; suma inmediato
    sali loop_trans   ; salto incondicional

feedback_write:
    mov r0, 302
    mov r1, 1
    ;escribir desde d2 a d1 usando indices con offset
    ;al terminar la escritura regresa a imagen_loop
    sali imagen_loop

loop_trans:
    mov r0, 90000
    cmp r10, r0    ; revisa si acabo la transformacion

    sig feedback_write    ; si acabo regreso a loop que genera imagenes

    ;calcular x, y actuales
    movi r0, 300
    mod r2, r10, r0    ; posicion a lo ancho x
    div r3, r10, r0   ; posicion a lo alto y

    ; calcular xnew 
    crg r6, r3(r5)     ; cargar resultado de sin(2*pi*y/Lx) escalado por 100
    mul r6, r6, r1     ; operar Ax*sin(2*pi*y/Lx)*100
    mov r0, 100
    div r6, r6, r0   ; dividir por valor escalado
    sum r6, r6, r2     ; operar r6 = x + Ax*sin(2*pi*y/Lx)
    mov r0, 300
    mod r12, r6, r0   ; calcular xnew = r6 % width

    ;calcular ynew
    crg r7, r2(r5)     ; cargar resultado de sin(2*pi*x/Ly) escalado por 100
    mul r7, r7, r1     ; operar Ay*sin(2*pi*x/Ly)*100
    mov r0, 100
    div r7, r7, r0   ; dividir por valor escalado
    sum r7, r7, r3     ; operar r7 = y + Ay*sin(2*pi*x/Ly)
    mov r0, 300
    mod r13, r7, r0   ; calcular ynew = r7 % height

    ;calcular indice del valor que se debe mover
    mul r4, r13, r0   ; operar r4 = ynew*width
    sum r4, r4, r12     ; operar r4 = ynew*width + xnew

    ; cargar valor de indice según referencia en memoria de datos
    crg r8, r4(r11)    ; traer valor del pixel con el indice nuevo desde memoria
    ; escribir el nuevo valor en el indice actual r10 de la memoria
    esc r8, r10(r11)
    OUT r8
    ;actualizar contador de loop
    mov r0, 1
    sum r10, r10, r0
    sali loop_trans

fin_prog:
    mov r0, 0
    mov r1, 0          ; Inicializar valor de Ax=Ay
    mov r4, 0          ; index
    mov r5, 400        ; direccion de sine LUT en memoria
    mov r10, 0         ; contador para loop de transformacion
    mov r11, 0         ; referencia a primer dato de pixel en memoria






